(self.webpackChunkgithub_search_app=self.webpackChunkgithub_search_app||[]).push([[934],{"./src/pages/UserPage.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Empty:()=>Empty,Error:()=>Error,Loading:()=>Loading,__namedExportsOrder:()=>__namedExportsOrder,default:()=>UserPage_stories});var react=__webpack_require__("./node_modules/react/index.js"),react_redux=__webpack_require__("./node_modules/react-redux/dist/react-redux.mjs"),store=__webpack_require__("./src/lib/store.ts"),dist=__webpack_require__("./node_modules/react-router/dist/index.js"),DropdownFilter=__webpack_require__("./src/components/DropdownFilter/DropdownFilter.tsx"),SearchBar=__webpack_require__("./src/components/SearchBar/SearchBar.tsx"),UserBio=__webpack_require__("./src/components/UserBio/UserBio.tsx"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const RepositoryList=(0,react.lazy)((()=>__webpack_require__.e(460).then(__webpack_require__.bind(__webpack_require__,"./src/components/Lists/RepositoryList/RepositoryList.tsx")))),UserPage=()=>{var _repos$;const dispatch=(0,react_redux.wA)(),{username}=(0,dist.g)(),{repos,status,error,filterType,filterLanguage}=(0,react_redux.d4)((state=>state.repositories)),[searchTerm,setSearchTerm]=(0,react.useState)(""),[filteredRepos,setFilteredRepos]=(0,react.useState)(repos);(0,react.useEffect)((()=>{username&&dispatch((0,store.y)(username))}),[dispatch,username]),(0,react.useEffect)((()=>{let result=repos;"all"!==filterType&&(result=result.filter((repo=>repo.private===("private"===filterType)))),"all"!==filterLanguage&&(result=result.filter((repo=>repo.language===filterLanguage))),result=result.filter((repo=>repo.name.toLowerCase().includes(searchTerm.toLowerCase()))),setFilteredRepos(result)}),[filterType,filterLanguage,searchTerm,repos]);return"loading"===status?(0,jsx_runtime.jsx)("div",{"data-testid":"loading",children:"Loading..."},"loading"):"failed"===status?(0,jsx_runtime.jsxs)("div",{children:["Error: ",error]}):(0,jsx_runtime.jsx)("div",{className:"relative container w-5/6 flex-grow py-16",children:(0,jsx_runtime.jsxs)("div",{className:"w-full grid grid-cols-1 lg:grid-cols-4 gap-16 md:gap-4",children:[(null===(_repos$=repos[0])||void 0===_repos$?void 0:_repos$.owner)&&(0,jsx_runtime.jsx)(UserBio.A,{user:repos[0].owner}),(0,jsx_runtime.jsxs)("div",{className:"flex flex-col items-center justify-start md:gap-16 gap-8 lg:col-span-3",children:[(0,jsx_runtime.jsxs)("div",{className:"w-full flex md:flex-row md:items-center flex-col md:gap-8 gap-2 items-end justify-end",children:[(0,jsx_runtime.jsx)(SearchBar.A,{placeholder:"Search repositories...",onSearch:term=>{setSearchTerm(term)}}),(0,jsx_runtime.jsxs)("div",{className:"w-fit flex gap-2 flex-wrap md:flex-nowrap justify-end",children:[(0,jsx_runtime.jsx)(DropdownFilter.A,{id:"repo-type",label:"Type:",options:[{value:"all",label:"All"},{value:"public",label:"Public"},{value:"private",label:"Private"}],selectedValue:filterType,onChange:value=>dispatch((0,store.Tt)(value))}),(0,jsx_runtime.jsx)(DropdownFilter.A,{id:"repo-language",label:"Language:",options:[{value:"all",label:"All"},{value:"JavaScript",label:"JavaScript"},{value:"TypeScript",label:"TypeScript"},{value:"Python",label:"Python"},{value:"CSS",label:"CSS"},{value:"Erlang",label:"Erlang"},{value:"Ruby",label:"Ruby"}],selectedValue:filterLanguage,onChange:value=>dispatch((0,store.fM)(value))})]})]}),(0,jsx_runtime.jsx)(react.Suspense,{fallback:(0,jsx_runtime.jsx)("div",{children:"Loading repositories..."}),children:filteredRepos.length>0?(0,jsx_runtime.jsx)(RepositoryList,{repositories:filteredRepos}):(0,jsx_runtime.jsx)("div",{className:"text-gray-500",children:"No repositories found."})})]})]})})},pages_UserPage=UserPage;UserPage.__docgenInfo={description:"",methods:[],displayName:"UserPage"};var test_dist=__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),jest_dist=__webpack_require__("./node_modules/@storybook/jest/dist/index.mjs"),redux_toolkit_modern=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs");const MockedState={status:"succeeded",repos:[{id:1,name:"asteroids",private:!1,language:"JavaScript",owner:{login:"octocat",avatar_url:"https://avatars.githubusercontent.com/u/583231?v=4",html_url:"https://github.com/octocat",id:0,repos_url:""},description:"",html_url:""},{id:2,name:"docz-website",private:!0,language:"TypeScript",owner:{login:"octocat",avatar_url:"https://avatars.githubusercontent.com/u/583231?v=4",html_url:"https://github.com/octocat",id:0,repos_url:""},description:"",html_url:""}],error:"",filterType:"all",filterLanguage:"all"},Mockstore=_ref=>{let{repositoriesState,children}=_ref;return(0,jsx_runtime.jsx)(react_redux.Kq,{store:(0,redux_toolkit_modern.U1)({reducer:{repositories:(0,redux_toolkit_modern.Z0)({name:"repositories",initialState:repositoriesState,reducers:{setFilterType(state,action){state.filterType=action.payload},setFilterLanguage(state,action){state.filterLanguage=action.payload}}}).reducer}}),children})},UserPage_stories={component:pages_UserPage,title:"Pages/UserPage",decorators:[story=>(0,jsx_runtime.jsx)("div",{children:story()})],excludeStories:/.*MockedState$/,tags:["autodocs"]},Default={decorators:[story=>(0,jsx_runtime.jsx)(Mockstore,{repositoriesState:MockedState,children:story()})],play:async _ref2=>{let{canvasElement}=_ref2;const canvas=(0,test_dist.ux)(canvasElement);await test_dist.rC.change(canvas.getByPlaceholderText("Search repositories..."),{target:{value:"asteroids"}}),await(0,test_dist.fm)((async()=>{await(0,jest_dist.E)(canvas.getByText("asteroids")).toBeInTheDocument(),await(0,jest_dist.E)(canvas.queryByText("docz-website")).not.toBeInTheDocument()}));const typeFilter=canvas.getByTestId("repo-type-filter");test_dist.rC.change(typeFilter,{target:{value:"public"}}),await(0,test_dist.fm)((()=>{(0,jest_dist.E)(canvas.getByText("asteroids")).toBeInTheDocument(),(0,jest_dist.E)(canvas.queryByText("docz-website")).not.toBeInTheDocument()}));const languageFilter=canvas.getByTestId("repo-language-filter");test_dist.rC.change(languageFilter,{target:{value:"TypeScript"}}),await(0,test_dist.fm)((()=>{(0,jest_dist.E)(canvas.queryByText("asteroids")).not.toBeInTheDocument(),(0,jest_dist.E)(canvas.getByText("No repositories found.")).toBeInTheDocument()}))}},Error={decorators:[story=>(0,jsx_runtime.jsx)(Mockstore,{repositoriesState:{...MockedState,repos:[],status:"failed",error:"Failed to fetch repositories"},children:story()})],play:async _ref3=>{let{canvasElement}=_ref3;const canvas=(0,test_dist.ux)(canvasElement);await(0,test_dist.fm)((async()=>{await(0,jest_dist.E)(canvas.getByText("Error: Failed to fetch repositories")).toBeInTheDocument()}))}},Loading={decorators:[story=>(0,jsx_runtime.jsx)(Mockstore,{repositoriesState:{...MockedState,repos:[],status:"loading",error:""},children:story()})],play:async _ref4=>{let{canvasElement}=_ref4;const canvas=(0,test_dist.ux)(canvasElement);await(0,test_dist.fm)((()=>{(0,jest_dist.E)(canvas.getByTestId("loading")).toBeInTheDocument()})),await(0,test_dist.fm)((()=>{(0,jest_dist.E)(canvas.getByText("Loading...")).toBeInTheDocument()}))}},Empty={decorators:[story=>(0,jsx_runtime.jsx)(Mockstore,{repositoriesState:{...MockedState,repos:[],status:"succeeded",error:""},children:story()})],play:async _ref5=>{let{canvasElement}=_ref5;const canvas=(0,test_dist.ux)(canvasElement);await(0,test_dist.fm)((()=>(0,jest_dist.E)(canvas.getByText("No repositories found.")).toBeInTheDocument()));const searchInput=canvas.getByPlaceholderText("Search repositories...");await test_dist.rC.change(searchInput,{target:{value:"react"}}),await(0,test_dist.fm)((()=>(0,jest_dist.E)(canvas.getByText("No repositories found.")).toBeInTheDocument()))}},__namedExportsOrder=["Default","Error","Loading","Empty"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  decorators: [(story: any) => <Mockstore repositoriesState={MockedState}>\r\n        {story()}\r\n        </Mockstore>],\n  play: async ({\n    canvasElement\n  }: {\n    canvasElement: HTMLElement;\n  }) => {\n    const canvas = within(canvasElement);\n    await fireEvent.change(canvas.getByPlaceholderText('Search repositories...'), {\n      target: {\n        value: 'asteroids'\n      }\n    });\n    await waitFor(async () => {\n      await expect(canvas.getByText('asteroids')).toBeInTheDocument();\n      await expect(canvas.queryByText('docz-website')).not.toBeInTheDocument();\n    });\n\n    // Interact with the type filter\n    const typeFilter = canvas.getByTestId('repo-type-filter');\n    fireEvent.change(typeFilter, {\n      target: {\n        value: 'public'\n      }\n    });\n\n    // Verify 'asteroids' remains as it is a public repo\n    await waitFor(() => {\n      expect(canvas.getByText('asteroids')).toBeInTheDocument();\n      expect(canvas.queryByText('docz-website')).not.toBeInTheDocument(); // docz-website is private\n    });\n\n    // Interact with the language filter\n    const languageFilter = canvas.getByTestId('repo-language-filter');\n    fireEvent.change(languageFilter, {\n      target: {\n        value: 'TypeScript'\n      }\n    });\n\n    // Verify no repositories found after changing language to TypeScript (asteroids is JavaScript)\n    await waitFor(() => {\n      expect(canvas.queryByText('asteroids')).not.toBeInTheDocument();\n      expect(canvas.getByText('No repositories found.')).toBeInTheDocument();\n    });\n  }\n}",...Default.parameters?.docs?.source}}},Error.parameters={...Error.parameters,docs:{...Error.parameters?.docs,source:{originalSource:"{\n  decorators: [(story: any) => <Mockstore repositoriesState={{\n    ...MockedState,\n    repos: [],\n    status: 'failed',\n    error: 'Failed to fetch repositories'\n  }}>\r\n        {story()}\r\n      </Mockstore>],\n  play: async ({\n    canvasElement\n  }: {\n    canvasElement: HTMLElement;\n  }) => {\n    const canvas = within(canvasElement);\n    await waitFor(async () => {\n      await expect(canvas.getByText('Error: Failed to fetch repositories')).toBeInTheDocument();\n    });\n  }\n}",...Error.parameters?.docs?.source}}},Loading.parameters={...Loading.parameters,docs:{...Loading.parameters?.docs,source:{originalSource:"{\n  decorators: [(story: any) => <Mockstore repositoriesState={{\n    ...MockedState,\n    repos: [],\n    status: 'loading',\n    error: ''\n  }}>\r\n          {story()}\r\n        </Mockstore>],\n  play: async ({\n    canvasElement\n  }: {\n    canvasElement: HTMLElement;\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Verify that the loading message is displayed\n    await waitFor(() => {\n      expect(canvas.getByTestId('loading')).toBeInTheDocument();\n    });\n\n    // Ensure the loading message persists (since we're simulating a loading state)\n    await waitFor(() => {\n      expect(canvas.getByText('Loading...')).toBeInTheDocument();\n    });\n  }\n}",...Loading.parameters?.docs?.source}}},Empty.parameters={...Empty.parameters,docs:{...Empty.parameters?.docs,source:{originalSource:"{\n  decorators: [(story: any) => <Mockstore repositoriesState={{\n    ...MockedState,\n    repos: [],\n    status: 'succeeded',\n    error: ''\n  }}>\r\n          {story()}\r\n        </Mockstore>],\n  play: async ({\n    canvasElement\n  }: {\n    canvasElement: HTMLElement;\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Ensure the initial state shows no repositories\n    await waitFor(() => expect(canvas.getByText('No repositories found.')).toBeInTheDocument());\n\n    // Simulate a search term input\n    const searchInput = canvas.getByPlaceholderText('Search repositories...');\n    await fireEvent.change(searchInput, {\n      target: {\n        value: 'react'\n      }\n    });\n\n    // Wait and verify the 'No repositories found' message still appears\n    await waitFor(() => expect(canvas.getByText('No repositories found.')).toBeInTheDocument());\n  }\n}",...Empty.parameters?.docs?.source}}}},"./src/components/DropdownFilter/DropdownFilter.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js");const DropdownFilter=_ref=>{let{id,label,options,selectedValue,onChange}=_ref;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("select",{id,value:selectedValue,onChange:e=>onChange(e.target.value),className:"bg-bgColor border border-textColor-300 md:text-base text-sm rounded-lg shadow-sm focus:outline-none focus:ring-1 focus:ring-primary focus:borderprimary p-2","data-testid":`${id}-filter`,children:options.map((option=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("option",{value:option.value,children:[label," ",option.label]},option.value)))})},__WEBPACK_DEFAULT_EXPORT__=DropdownFilter;DropdownFilter.__docgenInfo={description:"",methods:[],displayName:"DropdownFilter",props:{id:{required:!0,tsType:{name:"string"},description:""},label:{required:!0,tsType:{name:"string"},description:""},options:{required:!0,tsType:{name:"Array",elements:[{name:"signature",type:"object",raw:"{ value: string; label: string }",signature:{properties:[{key:"value",value:{name:"string",required:!0}},{key:"label",value:{name:"string",required:!0}}]}}],raw:"{ value: string; label: string }[]"},description:""},selectedValue:{required:!0,tsType:{name:"string"},description:""},onChange:{required:!0,tsType:{name:"signature",type:"function",raw:"(value: string) => void",signature:{arguments:[{type:{name:"string"},name:"value"}],return:{name:"void"}}},description:""}}}},"./src/components/SearchBar/SearchBar.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const SearchBar=_ref=>{let{placeholder="Search...",onSearch}=_ref;const[searchTerm,setSearchTerm]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div",{className:"flex items-center space-x-2 w-full",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("input",{type:"text",value:searchTerm,onChange:e=>{const value=e.target.value;setSearchTerm(value),onSearch(value)},placeholder,className:"min-w-4 w-full p-2 bg-textColor-50 border border-textColor-300 rounded-md focus:outline-none focus:ring-1 focus:ring-primary shadow-sm"})})},__WEBPACK_DEFAULT_EXPORT__=SearchBar;SearchBar.__docgenInfo={description:"",methods:[],displayName:"SearchBar",props:{placeholder:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:'"Search..."',computed:!1}},onSearch:{required:!0,tsType:{name:"signature",type:"function",raw:"(searchTerm: string) => void",signature:{arguments:[{type:{name:"string"},name:"searchTerm"}],return:{name:"void"}}},description:""}}}},"./src/components/UserBio/UserBio.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");const UserBio=_ref=>{let{user}=_ref;return user?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div",{className:"flex flex-col items-center",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("img",{src:user.avatar_url,alt:user.login,className:"w-40 h-40 lg:w-48 lg:h-48 rounded-full mb-4"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("h2",{className:"text-xl font-bold",children:user.login}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("a",{href:user.html_url,target:"_blank",rel:"noopener noreferrer",className:"text-primary mt-4 transition-transform duration-500 hover:translate-y-1",children:"View GitHub Profile"})]}):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div",{children:"Loading user..."})},__WEBPACK_DEFAULT_EXPORT__=UserBio;UserBio.__docgenInfo={description:"",methods:[],displayName:"UserBio",props:{user:{required:!1,tsType:{name:"GithubUser"},description:""}}}},"./src/lib/store.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{K_:()=>fetchGithubUsers,Tt:()=>setFilterType,fM:()=>setFilterLanguage,y:()=>fetchGithubRepositories});var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs");const fetchGithubUsers=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.zD)("users/fetchGithubUsers",(async()=>{const response=await fetch("https://api.github.com/users");if(!response.ok)throw new Error("Failed to fetch users");return response.json()})),usersSlice=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.Z0)({name:"users",initialState:{users:[],status:"idle",error:null},reducers:{},extraReducers:builder=>{builder.addCase(fetchGithubUsers.pending,(state=>{state.status="loading",state.error=null})).addCase(fetchGithubUsers.fulfilled,((state,action)=>{state.status="succeeded",state.users=action.payload})).addCase(fetchGithubUsers.rejected,((state,action)=>{state.status="failed",state.error=action.error.message||"Something went wrong"}))}}),fetchGithubRepositories=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.zD)("repositories/fetchGithubRepositories",(async username=>{const response=await fetch(`https://api.github.com/users/${username}/repos`);if(!response.ok)throw new Error("Failed to fetch repositories");return response.json()})),repositoriesSlice=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.Z0)({name:"repositories",initialState:{repos:[],status:"idle",error:null,filterType:"all",filterLanguage:"all"},reducers:{setFilterType(state,action){state.filterType=action.payload},setFilterLanguage(state,action){state.filterLanguage=action.payload}},extraReducers:builder=>{builder.addCase(fetchGithubRepositories.pending,(state=>{state.status="loading",state.error=null})).addCase(fetchGithubRepositories.fulfilled,((state,action)=>{state.status="succeeded",state.repos=action.payload})).addCase(fetchGithubRepositories.rejected,((state,action)=>{state.status="failed",state.error=action.error.message||"Something went wrong"}))}}),{setFilterType,setFilterLanguage}=repositoriesSlice.actions;(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_0__.U1)({reducer:{users:usersSlice.reducer,repositories:repositoriesSlice.reducer}})},"?4f7e":()=>{}}]);